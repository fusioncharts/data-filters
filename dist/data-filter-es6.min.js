(function(window, document, undefined) {
"use strict";

class FCDataFilterExt {
  constructor () {
    var multiChart = new MultiCharting();
    this.datastore = multiChart.createDataStore();
    // setting demo data
    this.demoData = {
      dataSource: [{
        product: 'tea',
        sale: '45',
        year: 2016
      },
      {
        product: 'coffee',
        sale: '45',
        year: 2016
      }]
    };
    this.datastore.setData(this.demoData);
    // data set
  }

  getConfigFromData () {
    var config = {};

    if (!this.datastore) {
      return;
    }
  }

  updateConfig (config) {
  }
}
window.FCDataFilterExt = FCDataFilterExt;

'use strict';

class FilterVisual {

  constructor (filterState, containerId, filterExt) {
    /**
     * @private
     */
    this.filterState = filterState;
    this.filterExt = filterExt;
    this.config = {};
    this.config.containerId = containerId;
    this.draw();
  }

  draw () {
    var self = this,
      filterState = self.filterState,
      containerId = self.config.containerId,
      parentContainer = document.getElementById(containerId),
      wrapper,
      section,
      cards,
      header,
      input,
      label,
      cardBody,
      ul,
      li,
      i,
      j,
      catName,
      catObj,
      itemObj,
      itemVal,
      button;

    if (!parentContainer) {
      return;
    }

    parentContainer.innerHTML = '';

    wrapper = self.createElements('div', {
      'class': 'fc_ext_filter_cont'
    });
    wrapper.setAttribute('style', 'overflow-y: scroll; overflow-x: hidden;');
    wrapper.style.height = parentContainer.style.height;

    for (i = 0; i < filterState.length; i++) {
      catObj = filterState[i];
      catName = catObj.category;

      if (catObj.visible) {
        section = self.createElements('section');
        wrapper.appendChild(section);

        cards = self.createElements('div', {
          'class': 'fc_ext_filter_card'
        });
        section.appendChild(cards);

        header = self.createElements('header');
        cards.appendChild(header);

        input = self.createElements('input', {
          'type': 'checkbox',
          'value': catName,
          'id': 'fc_ext_filter_cat_' + catName,
          'checked': catObj.checked
        });
        catObj.elem = input;
        input.disabled = catObj.disabled;
        header.appendChild(input);

        label = self.createElements('label', {
          'for': 'fc_ext_filter_cat_' + catName
        });
        label.innerHTML = catName;
        header.appendChild(label);

        cardBody = self.createElements('div', {
          'class': 'fc_ext_filter_card-body'
        });
        cards.appendChild(cardBody);

        if (catObj.type === 'string') {
          ul = self.createElements('ul');
          cardBody.appendChild(ul);

          for (j = 0; j < catObj.items.length; j++) {
            itemObj = catObj.items[j];
            itemVal = itemObj.value;

            li = self.createElements('li');
            ul.appendChild(li);

            input = self.createElements('input', {
              'type': 'checkbox',
              'value': itemVal,
              'id': 'fc_ext_filter_item_' + itemVal,
              'checked': itemObj.checked
            });
            itemObj.elem = input;
            input.disabled = itemObj.disabled;
            li.appendChild(input);
            label = self.createElements('label', {
              'for': 'fc_ext_filter_item_' + itemVal
            });
            label.innerHTML = itemVal;
            li.appendChild(label);
          }
        }
      }
    }
    section = self.createElements('section');
    wrapper.appendChild(section);
    button = self.createElements('button');
    button.innerHTML = 'Apply';
    button.onclick = self.applyFilter.bind(this);
    section.appendChild(button);

    parentContainer.appendChild(wrapper);
    window.filterState = filterState;
  }

  applyFilter () {
    var self = this,
      filterState = self.filterState,
      i,
      j,
      catObj,
      itemObj,
      catElem,
      itemElem;

    for (i = 0; i < filterState.length; i++) {
      catObj = filterState[i];
      catElem = catObj.elem;

      if (catObj.type === 'string') {
        if (catElem && !catObj.disabled) {
          catObj.checked = catElem.checked;
        }
        for (j = 0; j < catObj.items.length; j++) {
          itemObj = catObj.items[j];
          itemElem = itemObj.elem;
          if (itemElem && !itemObj.disabled) {
            itemObj.checked = itemElem.checked;
          }
        }
      }
    }
    self.filterExt.apply(filterState);
  }

  createElements (name, attr) {
    var elem = document.createElement(name),
      key;

    for (key in attr) {
      elem.setAttribute(key, attr[key]);
    }

    return elem;
  }
}
}(this, document));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJkYXRhLWZpbHRlci1lczYubWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblwidXNlIHN0cmljdFwiO1xuXG5jbGFzcyBGQ0RhdGFGaWx0ZXJFeHQge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdmFyIG11bHRpQ2hhcnQgPSBuZXcgTXVsdGlDaGFydGluZygpO1xuICAgIHRoaXMuZGF0YXN0b3JlID0gbXVsdGlDaGFydC5jcmVhdGVEYXRhU3RvcmUoKTtcbiAgICAvLyBzZXR0aW5nIGRlbW8gZGF0YVxuICAgIHRoaXMuZGVtb0RhdGEgPSB7XG4gICAgICBkYXRhU291cmNlOiBbe1xuICAgICAgICBwcm9kdWN0OiAndGVhJyxcbiAgICAgICAgc2FsZTogJzQ1JyxcbiAgICAgICAgeWVhcjogMjAxNlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcHJvZHVjdDogJ2NvZmZlZScsXG4gICAgICAgIHNhbGU6ICc0NScsXG4gICAgICAgIHllYXI6IDIwMTZcbiAgICAgIH1dXG4gICAgfTtcbiAgICB0aGlzLmRhdGFzdG9yZS5zZXREYXRhKHRoaXMuZGVtb0RhdGEpO1xuICAgIC8vIGRhdGEgc2V0XG4gIH1cblxuICBnZXRDb25maWdGcm9tRGF0YSAoKSB7XG4gICAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gICAgaWYgKCF0aGlzLmRhdGFzdG9yZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUNvbmZpZyAoY29uZmlnKSB7XG4gIH1cbn1cbndpbmRvdy5GQ0RhdGFGaWx0ZXJFeHQgPSBGQ0RhdGFGaWx0ZXJFeHQ7XG5cbid1c2Ugc3RyaWN0JztcblxuY2xhc3MgRmlsdGVyVmlzdWFsIHtcblxuICBjb25zdHJ1Y3RvciAoZmlsdGVyU3RhdGUsIGNvbnRhaW5lcklkLCBmaWx0ZXJFeHQpIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuZmlsdGVyU3RhdGUgPSBmaWx0ZXJTdGF0ZTtcbiAgICB0aGlzLmZpbHRlckV4dCA9IGZpbHRlckV4dDtcbiAgICB0aGlzLmNvbmZpZyA9IHt9O1xuICAgIHRoaXMuY29uZmlnLmNvbnRhaW5lcklkID0gY29udGFpbmVySWQ7XG4gICAgdGhpcy5kcmF3KCk7XG4gIH1cblxuICBkcmF3ICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICBmaWx0ZXJTdGF0ZSA9IHNlbGYuZmlsdGVyU3RhdGUsXG4gICAgICBjb250YWluZXJJZCA9IHNlbGYuY29uZmlnLmNvbnRhaW5lcklkLFxuICAgICAgcGFyZW50Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29udGFpbmVySWQpLFxuICAgICAgd3JhcHBlcixcbiAgICAgIHNlY3Rpb24sXG4gICAgICBjYXJkcyxcbiAgICAgIGhlYWRlcixcbiAgICAgIGlucHV0LFxuICAgICAgbGFiZWwsXG4gICAgICBjYXJkQm9keSxcbiAgICAgIHVsLFxuICAgICAgbGksXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIGNhdE5hbWUsXG4gICAgICBjYXRPYmosXG4gICAgICBpdGVtT2JqLFxuICAgICAgaXRlbVZhbCxcbiAgICAgIGJ1dHRvbjtcblxuICAgIGlmICghcGFyZW50Q29udGFpbmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGFyZW50Q29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuXG4gICAgd3JhcHBlciA9IHNlbGYuY3JlYXRlRWxlbWVudHMoJ2RpdicsIHtcbiAgICAgICdjbGFzcyc6ICdmY19leHRfZmlsdGVyX2NvbnQnXG4gICAgfSk7XG4gICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ292ZXJmbG93LXk6IHNjcm9sbDsgb3ZlcmZsb3cteDogaGlkZGVuOycpO1xuICAgIHdyYXBwZXIuc3R5bGUuaGVpZ2h0ID0gcGFyZW50Q29udGFpbmVyLnN0eWxlLmhlaWdodDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJTdGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgY2F0T2JqID0gZmlsdGVyU3RhdGVbaV07XG4gICAgICBjYXROYW1lID0gY2F0T2JqLmNhdGVnb3J5O1xuXG4gICAgICBpZiAoY2F0T2JqLnZpc2libGUpIHtcbiAgICAgICAgc2VjdGlvbiA9IHNlbGYuY3JlYXRlRWxlbWVudHMoJ3NlY3Rpb24nKTtcbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChzZWN0aW9uKTtcblxuICAgICAgICBjYXJkcyA9IHNlbGYuY3JlYXRlRWxlbWVudHMoJ2RpdicsIHtcbiAgICAgICAgICAnY2xhc3MnOiAnZmNfZXh0X2ZpbHRlcl9jYXJkJ1xuICAgICAgICB9KTtcbiAgICAgICAgc2VjdGlvbi5hcHBlbmRDaGlsZChjYXJkcyk7XG5cbiAgICAgICAgaGVhZGVyID0gc2VsZi5jcmVhdGVFbGVtZW50cygnaGVhZGVyJyk7XG4gICAgICAgIGNhcmRzLmFwcGVuZENoaWxkKGhlYWRlcik7XG5cbiAgICAgICAgaW5wdXQgPSBzZWxmLmNyZWF0ZUVsZW1lbnRzKCdpbnB1dCcsIHtcbiAgICAgICAgICAndHlwZSc6ICdjaGVja2JveCcsXG4gICAgICAgICAgJ3ZhbHVlJzogY2F0TmFtZSxcbiAgICAgICAgICAnaWQnOiAnZmNfZXh0X2ZpbHRlcl9jYXRfJyArIGNhdE5hbWUsXG4gICAgICAgICAgJ2NoZWNrZWQnOiBjYXRPYmouY2hlY2tlZFxuICAgICAgICB9KTtcbiAgICAgICAgY2F0T2JqLmVsZW0gPSBpbnB1dDtcbiAgICAgICAgaW5wdXQuZGlzYWJsZWQgPSBjYXRPYmouZGlzYWJsZWQ7XG4gICAgICAgIGhlYWRlci5hcHBlbmRDaGlsZChpbnB1dCk7XG5cbiAgICAgICAgbGFiZWwgPSBzZWxmLmNyZWF0ZUVsZW1lbnRzKCdsYWJlbCcsIHtcbiAgICAgICAgICAnZm9yJzogJ2ZjX2V4dF9maWx0ZXJfY2F0XycgKyBjYXROYW1lXG4gICAgICAgIH0pO1xuICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSBjYXROYW1lO1xuICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gICAgICAgIGNhcmRCb2R5ID0gc2VsZi5jcmVhdGVFbGVtZW50cygnZGl2Jywge1xuICAgICAgICAgICdjbGFzcyc6ICdmY19leHRfZmlsdGVyX2NhcmQtYm9keSdcbiAgICAgICAgfSk7XG4gICAgICAgIGNhcmRzLmFwcGVuZENoaWxkKGNhcmRCb2R5KTtcblxuICAgICAgICBpZiAoY2F0T2JqLnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdWwgPSBzZWxmLmNyZWF0ZUVsZW1lbnRzKCd1bCcpO1xuICAgICAgICAgIGNhcmRCb2R5LmFwcGVuZENoaWxkKHVsKTtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBjYXRPYmouaXRlbXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGl0ZW1PYmogPSBjYXRPYmouaXRlbXNbal07XG4gICAgICAgICAgICBpdGVtVmFsID0gaXRlbU9iai52YWx1ZTtcblxuICAgICAgICAgICAgbGkgPSBzZWxmLmNyZWF0ZUVsZW1lbnRzKCdsaScpO1xuICAgICAgICAgICAgdWwuYXBwZW5kQ2hpbGQobGkpO1xuXG4gICAgICAgICAgICBpbnB1dCA9IHNlbGYuY3JlYXRlRWxlbWVudHMoJ2lucHV0Jywge1xuICAgICAgICAgICAgICAndHlwZSc6ICdjaGVja2JveCcsXG4gICAgICAgICAgICAgICd2YWx1ZSc6IGl0ZW1WYWwsXG4gICAgICAgICAgICAgICdpZCc6ICdmY19leHRfZmlsdGVyX2l0ZW1fJyArIGl0ZW1WYWwsXG4gICAgICAgICAgICAgICdjaGVja2VkJzogaXRlbU9iai5jaGVja2VkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGl0ZW1PYmouZWxlbSA9IGlucHV0O1xuICAgICAgICAgICAgaW5wdXQuZGlzYWJsZWQgPSBpdGVtT2JqLmRpc2FibGVkO1xuICAgICAgICAgICAgbGkuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICAgICAgbGFiZWwgPSBzZWxmLmNyZWF0ZUVsZW1lbnRzKCdsYWJlbCcsIHtcbiAgICAgICAgICAgICAgJ2Zvcic6ICdmY19leHRfZmlsdGVyX2l0ZW1fJyArIGl0ZW1WYWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGFiZWwuaW5uZXJIVE1MID0gaXRlbVZhbDtcbiAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKGxhYmVsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc2VjdGlvbiA9IHNlbGYuY3JlYXRlRWxlbWVudHMoJ3NlY3Rpb24nKTtcbiAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNlY3Rpb24pO1xuICAgIGJ1dHRvbiA9IHNlbGYuY3JlYXRlRWxlbWVudHMoJ2J1dHRvbicpO1xuICAgIGJ1dHRvbi5pbm5lckhUTUwgPSAnQXBwbHknO1xuICAgIGJ1dHRvbi5vbmNsaWNrID0gc2VsZi5hcHBseUZpbHRlci5iaW5kKHRoaXMpO1xuICAgIHNlY3Rpb24uYXBwZW5kQ2hpbGQoYnV0dG9uKTtcblxuICAgIHBhcmVudENvbnRhaW5lci5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgICB3aW5kb3cuZmlsdGVyU3RhdGUgPSBmaWx0ZXJTdGF0ZTtcbiAgfVxuXG4gIGFwcGx5RmlsdGVyICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICBmaWx0ZXJTdGF0ZSA9IHNlbGYuZmlsdGVyU3RhdGUsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIGNhdE9iaixcbiAgICAgIGl0ZW1PYmosXG4gICAgICBjYXRFbGVtLFxuICAgICAgaXRlbUVsZW07XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgZmlsdGVyU3RhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNhdE9iaiA9IGZpbHRlclN0YXRlW2ldO1xuICAgICAgY2F0RWxlbSA9IGNhdE9iai5lbGVtO1xuXG4gICAgICBpZiAoY2F0T2JqLnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChjYXRFbGVtICYmICFjYXRPYmouZGlzYWJsZWQpIHtcbiAgICAgICAgICBjYXRPYmouY2hlY2tlZCA9IGNhdEVsZW0uY2hlY2tlZDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgY2F0T2JqLml0ZW1zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaXRlbU9iaiA9IGNhdE9iai5pdGVtc1tqXTtcbiAgICAgICAgICBpdGVtRWxlbSA9IGl0ZW1PYmouZWxlbTtcbiAgICAgICAgICBpZiAoaXRlbUVsZW0gJiYgIWl0ZW1PYmouZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGl0ZW1PYmouY2hlY2tlZCA9IGl0ZW1FbGVtLmNoZWNrZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHNlbGYuZmlsdGVyRXh0LmFwcGx5KGZpbHRlclN0YXRlKTtcbiAgfVxuXG4gIGNyZWF0ZUVsZW1lbnRzIChuYW1lLCBhdHRyKSB7XG4gICAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpLFxuICAgICAga2V5O1xuXG4gICAgZm9yIChrZXkgaW4gYXR0cikge1xuICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyW2tleV0pO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtO1xuICB9XG59XG59KHRoaXMsIGRvY3VtZW50KSk7XG4iXSwiZmlsZSI6ImRhdGEtZmlsdGVyLWVzNi5taW4uanMifQ==
